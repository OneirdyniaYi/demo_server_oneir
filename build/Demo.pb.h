// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Demo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Demo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Demo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Demo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Demo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Demo_2eproto;
class ReqTest;
class ReqTestDefaultTypeInternal;
extern ReqTestDefaultTypeInternal _ReqTest_default_instance_;
class ReqTest2;
class ReqTest2DefaultTypeInternal;
extern ReqTest2DefaultTypeInternal _ReqTest2_default_instance_;
class RspTest;
class RspTestDefaultTypeInternal;
extern RspTestDefaultTypeInternal _RspTest_default_instance_;
class RspTest2;
class RspTest2DefaultTypeInternal;
extern RspTest2DefaultTypeInternal _RspTest2_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ReqTest* Arena::CreateMaybeMessage<::ReqTest>(Arena*);
template<> ::ReqTest2* Arena::CreateMaybeMessage<::ReqTest2>(Arena*);
template<> ::RspTest* Arena::CreateMaybeMessage<::RspTest>(Arena*);
template<> ::RspTest2* Arena::CreateMaybeMessage<::RspTest2>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ReqTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqTest) */ {
 public:
  inline ReqTest() : ReqTest(nullptr) {}
  virtual ~ReqTest();

  ReqTest(const ReqTest& from);
  ReqTest(ReqTest&& from) noexcept
    : ReqTest() {
    *this = ::std::move(from);
  }

  inline ReqTest& operator=(const ReqTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqTest& operator=(ReqTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqTest& default_instance();

  static inline const ReqTest* internal_default_instance() {
    return reinterpret_cast<const ReqTest*>(
               &_ReqTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqTest& a, ReqTest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqTest* New() const final {
    return CreateMaybeMessage<ReqTest>(nullptr);
  }

  ReqTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqTest& from);
  void MergeFrom(const ReqTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqTest";
  }
  protected:
  explicit ReqTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
  };
  // int32 a = 1;
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ReqTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class RspTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RspTest) */ {
 public:
  inline RspTest() : RspTest(nullptr) {}
  virtual ~RspTest();

  RspTest(const RspTest& from);
  RspTest(RspTest&& from) noexcept
    : RspTest() {
    *this = ::std::move(from);
  }

  inline RspTest& operator=(const RspTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspTest& operator=(RspTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspTest& default_instance();

  static inline const RspTest* internal_default_instance() {
    return reinterpret_cast<const RspTest*>(
               &_RspTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RspTest& a, RspTest& b) {
    a.Swap(&b);
  }
  inline void Swap(RspTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RspTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RspTest* New() const final {
    return CreateMaybeMessage<RspTest>(nullptr);
  }

  RspTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspTest& from);
  void MergeFrom(const RspTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RspTest";
  }
  protected:
  explicit RspTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBFieldNumber = 1,
  };
  // int32 b = 1;
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::int32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RspTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class ReqTest2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqTest2) */ {
 public:
  inline ReqTest2() : ReqTest2(nullptr) {}
  virtual ~ReqTest2();

  ReqTest2(const ReqTest2& from);
  ReqTest2(ReqTest2&& from) noexcept
    : ReqTest2() {
    *this = ::std::move(from);
  }

  inline ReqTest2& operator=(const ReqTest2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqTest2& operator=(ReqTest2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqTest2& default_instance();

  static inline const ReqTest2* internal_default_instance() {
    return reinterpret_cast<const ReqTest2*>(
               &_ReqTest2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReqTest2& a, ReqTest2& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqTest2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqTest2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqTest2* New() const final {
    return CreateMaybeMessage<ReqTest2>(nullptr);
  }

  ReqTest2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqTest2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqTest2& from);
  void MergeFrom(const ReqTest2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTest2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqTest2";
  }
  protected:
  explicit ReqTest2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kAaFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 aa = 1;
  void clear_aa();
  ::PROTOBUF_NAMESPACE_ID::int32 aa() const;
  void set_aa(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_aa() const;
  void _internal_set_aa(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ReqTest2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 aa_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class RspTest2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RspTest2) */ {
 public:
  inline RspTest2() : RspTest2(nullptr) {}
  virtual ~RspTest2();

  RspTest2(const RspTest2& from);
  RspTest2(RspTest2&& from) noexcept
    : RspTest2() {
    *this = ::std::move(from);
  }

  inline RspTest2& operator=(const RspTest2& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspTest2& operator=(RspTest2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RspTest2& default_instance();

  static inline const RspTest2* internal_default_instance() {
    return reinterpret_cast<const RspTest2*>(
               &_RspTest2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RspTest2& a, RspTest2& b) {
    a.Swap(&b);
  }
  inline void Swap(RspTest2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RspTest2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RspTest2* New() const final {
    return CreateMaybeMessage<RspTest2>(nullptr);
  }

  RspTest2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RspTest2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RspTest2& from);
  void MergeFrom(const RspTest2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspTest2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RspTest2";
  }
  protected:
  explicit RspTest2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsg2FieldNumber = 2,
    kBbFieldNumber = 1,
  };
  // string msg2 = 2;
  void clear_msg2();
  const std::string& msg2() const;
  void set_msg2(const std::string& value);
  void set_msg2(std::string&& value);
  void set_msg2(const char* value);
  void set_msg2(const char* value, size_t size);
  std::string* mutable_msg2();
  std::string* release_msg2();
  void set_allocated_msg2(std::string* msg2);
  private:
  const std::string& _internal_msg2() const;
  void _internal_set_msg2(const std::string& value);
  std::string* _internal_mutable_msg2();
  public:

  // int32 bb = 1;
  void clear_bb();
  ::PROTOBUF_NAMESPACE_ID::int32 bb() const;
  void set_bb(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bb() const;
  void _internal_set_bb(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RspTest2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg2_;
  ::PROTOBUF_NAMESPACE_ID::int32 bb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Demo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqTest

// int32 a = 1;
inline void ReqTest::clear_a() {
  a_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTest::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTest::a() const {
  // @@protoc_insertion_point(field_get:ReqTest.a)
  return _internal_a();
}
inline void ReqTest::_internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  a_ = value;
}
inline void ReqTest::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:ReqTest.a)
}

// -------------------------------------------------------------------

// RspTest

// int32 b = 1;
inline void RspTest::clear_b() {
  b_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RspTest::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RspTest::b() const {
  // @@protoc_insertion_point(field_get:RspTest.b)
  return _internal_b();
}
inline void RspTest::_internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  b_ = value;
}
inline void RspTest::set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:RspTest.b)
}

// -------------------------------------------------------------------

// ReqTest2

// int32 aa = 1;
inline void ReqTest2::clear_aa() {
  aa_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTest2::_internal_aa() const {
  return aa_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTest2::aa() const {
  // @@protoc_insertion_point(field_get:ReqTest2.aa)
  return _internal_aa();
}
inline void ReqTest2::_internal_set_aa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  aa_ = value;
}
inline void ReqTest2::set_aa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_aa(value);
  // @@protoc_insertion_point(field_set:ReqTest2.aa)
}

// string msg = 2;
inline void ReqTest2::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ReqTest2::msg() const {
  // @@protoc_insertion_point(field_get:ReqTest2.msg)
  return _internal_msg();
}
inline void ReqTest2::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:ReqTest2.msg)
}
inline std::string* ReqTest2::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:ReqTest2.msg)
  return _internal_mutable_msg();
}
inline const std::string& ReqTest2::_internal_msg() const {
  return msg_.Get();
}
inline void ReqTest2::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReqTest2::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ReqTest2.msg)
}
inline void ReqTest2::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ReqTest2.msg)
}
inline void ReqTest2::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ReqTest2.msg)
}
inline std::string* ReqTest2::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReqTest2::release_msg() {
  // @@protoc_insertion_point(field_release:ReqTest2.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReqTest2::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ReqTest2.msg)
}

// -------------------------------------------------------------------

// RspTest2

// int32 bb = 1;
inline void RspTest2::clear_bb() {
  bb_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RspTest2::_internal_bb() const {
  return bb_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RspTest2::bb() const {
  // @@protoc_insertion_point(field_get:RspTest2.bb)
  return _internal_bb();
}
inline void RspTest2::_internal_set_bb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bb_ = value;
}
inline void RspTest2::set_bb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bb(value);
  // @@protoc_insertion_point(field_set:RspTest2.bb)
}

// string msg2 = 2;
inline void RspTest2::clear_msg2() {
  msg2_.ClearToEmpty();
}
inline const std::string& RspTest2::msg2() const {
  // @@protoc_insertion_point(field_get:RspTest2.msg2)
  return _internal_msg2();
}
inline void RspTest2::set_msg2(const std::string& value) {
  _internal_set_msg2(value);
  // @@protoc_insertion_point(field_set:RspTest2.msg2)
}
inline std::string* RspTest2::mutable_msg2() {
  // @@protoc_insertion_point(field_mutable:RspTest2.msg2)
  return _internal_mutable_msg2();
}
inline const std::string& RspTest2::_internal_msg2() const {
  return msg2_.Get();
}
inline void RspTest2::_internal_set_msg2(const std::string& value) {
  
  msg2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RspTest2::set_msg2(std::string&& value) {
  
  msg2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RspTest2.msg2)
}
inline void RspTest2::set_msg2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RspTest2.msg2)
}
inline void RspTest2::set_msg2(const char* value,
    size_t size) {
  
  msg2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RspTest2.msg2)
}
inline std::string* RspTest2::_internal_mutable_msg2() {
  
  return msg2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RspTest2::release_msg2() {
  // @@protoc_insertion_point(field_release:RspTest2.msg2)
  return msg2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RspTest2::set_allocated_msg2(std::string* msg2) {
  if (msg2 != nullptr) {
    
  } else {
    
  }
  msg2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RspTest2.msg2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Demo_2eproto
